package zte.phone.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PhoneNoteTable".
*/
public class PhoneNoteDao extends AbstractDao<PhoneNote, Void> {

    public static final String TABLENAME = "PhoneNoteTable";

    /**
     * Properties of entity PhoneNote.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Bmob_phone_id = new Property(0, Long.class, "bmob_phone_id", false, "BMOB_PHONE_ID");
        public final static Property Phone_name = new Property(1, String.class, "phone_name", false, "PHONE_NAME");
        public final static Property Phone_number = new Property(2, Integer.class, "phone_number", false, "PHONE_NUMBER");
        public final static Property Project_name = new Property(3, String.class, "project_name", false, "PROJECT_NAME");
        public final static Property Phone_time = new Property(4, String.class, "phone_time", false, "PHONE_TIME");
        public final static Property Phone_photo_url = new Property(5, String.class, "phone_photo_url", false, "PHONE_PHOTO_URL");
    };


    public PhoneNoteDao(DaoConfig config) {
        super(config);
    }
    
    public PhoneNoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PhoneNoteTable\" (" + //
                "\"BMOB_PHONE_ID\" INTEGER," + // 0: bmob_phone_id
                "\"PHONE_NAME\" TEXT," + // 1: phone_name
                "\"PHONE_NUMBER\" INTEGER," + // 2: phone_number
                "\"PROJECT_NAME\" TEXT," + // 3: project_name
                "\"PHONE_TIME\" TEXT," + // 4: phone_time
                "\"PHONE_PHOTO_URL\" TEXT);"); // 5: phone_photo_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PhoneNoteTable\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PhoneNote entity) {
        stmt.clearBindings();
 
        Long bmob_phone_id = entity.getBmob_phone_id();
        if (bmob_phone_id != null) {
            stmt.bindLong(1, bmob_phone_id);
        }
 
        String phone_name = entity.getPhone_name();
        if (phone_name != null) {
            stmt.bindString(2, phone_name);
        }
 
        Integer phone_number = entity.getPhone_number();
        if (phone_number != null) {
            stmt.bindLong(3, phone_number);
        }
 
        String project_name = entity.getProject_name();
        if (project_name != null) {
            stmt.bindString(4, project_name);
        }
 
        String phone_time = entity.getPhone_time();
        if (phone_time != null) {
            stmt.bindString(5, phone_time);
        }
 
        String phone_photo_url = entity.getPhone_photo_url();
        if (phone_photo_url != null) {
            stmt.bindString(6, phone_photo_url);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public PhoneNote readEntity(Cursor cursor, int offset) {
        PhoneNote entity = new PhoneNote( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // bmob_phone_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phone_name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // phone_number
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // project_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // phone_photo_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PhoneNote entity, int offset) {
        entity.setBmob_phone_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone_number(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setProject_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone_photo_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(PhoneNote entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(PhoneNote entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
